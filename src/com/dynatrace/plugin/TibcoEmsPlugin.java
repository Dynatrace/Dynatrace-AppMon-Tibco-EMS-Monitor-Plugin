
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.compuwareapm.com/
  * For information how to publish a plugin please visit http://community.compuwareapm.com/plugins/contribute/
  **/ 

package com.dynatrace.plugin;

import com.dynatrace.diagnostics.pdk.*;
import com.tibco.tibjms.admin.ConsumerInfo;
import com.tibco.tibjms.admin.DestinationInfo;
import com.tibco.tibjms.admin.QueueInfo;
import com.tibco.tibjms.admin.ServerInfo;
import com.tibco.tibjms.admin.TibjmsAdmin;
import com.tibco.tibjms.admin.TibjmsAdminException;
import com.tibco.tibjms.admin.TopicInfo;

import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;


public class TibcoEmsPlugin implements Monitor {
	//
	private static final Logger log = Logger.getLogger(TibcoEmsPlugin.class.getName());

	private static final String METRIC_GROUP_BROKER_STAT = "Broker Stat";
	private static final String METRIC_GROUP_DEST_STAT = "Destination Stat";
	private static final String METRIC_GROUP_CONSUMER_STAT = "Consumers Stat";
	
	private static final String MSR_DISK_READ_RATE = "(Broker) - Disk Read Rate";
	private static final String MSR_DISK_WRITE_RATE="(Broker) - Disk Write Rate";
	private static final String MSR_SYNC_STORE_SIZE="(Broker) - Sync Msg Store Size";
	private static final String MSR_ASYNC_STORE_SIZE="(Broker) - Async Msg Store Size";
	
	private static final String MSR_MSG_MEM_USED="(Broker) - Msg Mem Used";
	private static final String MSR_MSG_MEM_POOL_USED="(Broker) - Msg Mem Pool Used";
	private static final String MSR_MSG_MAX_MEM="(Broker) - Max Msg Mem Allowed";
	private static final String MSR_MSG_FREE_MEM="(Broker) - Free Msg Mem";
	
	private static final String MSR_CONN_COUNT="(Broker) - Connection Count";
	private static final String MSR_CONN_PERCENTAGE="(Broker) - Connection Percentage to Max Connections";
	private static final String MSR_SESSION_COUNT="(Broker) - Session Count";
	private static final String MSR_MAX_CONNS="(Broker) - Maximum Connections";
	
	private static final String MSR_PRODUCER_COUNT="(Broker) - Producer Count";
	private static final String MSR_CONSUMER_COUNT="(Broker) - Consumer Count";
	private static final String MSR_DURABLE_COUNT="(Broker) - Durable Count";
	private static final String MSR_TOPIC_COUNT="(Broker) - Topic Count";
	private static final String MSR_QUEUE_COUNT="(Broker) - Queue Count";
	
	private static final String MSR_PENDING_MSG_COUNT="(Broker) - Pending Message Count";
	private static final String MSR_PENDING_MSG_SIZE="(Broker) - Pending Message Size";
	
	private static final String MSR_INBOUND_MSG_COUNT="(Broker) - Inbound Message Count";
	private static final String MSR_INBOUND_MSG_RATE="(Broker) - Inbound Message Rate";
	private static final String MSR_INBOUND_BYTES_RATE="(Broker) - Inbound Bytes Rate";
	
	private static final String MSR_OUTBOUND_MSG_COUNT="(Broker) - Outbound Message Count";
	private static final String MSR_OUTBOUND_MSG_RATE="(Broker) - Outbound Message Rate";
	private static final String MSR_OUTBOUND_BYTES_RATE="(Broker) - Outbound Bytes Rate";

	private static final String MSR_LOGFILE_MAX_SIZE="(Server) - Log File Size Max";
	private static final String MSR_LOGFILE_SIZE="(Server) - Log File Size";
	private static final String MSR_LOGFILE_PERCENT_USED="(Server) - Log File Percent Used";

	private static final String MSR_DEST_CONSUMER_COUNT="Consumer Count";
	private static final String MSR_DEST_FLOWCONTROL_MAXBYTES="FlowControl MaxBytes";
	private static final String MSR_DEST_PENDING_MSG_COUNT="Pending Message Count";
	private static final String MSR_DEST_PENDING_MSG_SIZE="Pending Message Size";
		
	private static final String MSR_DEST_INBOUND_MSG_COUNT="Inbound Message Count";
	private static final String MSR_DEST_INBOUND_MSG_RATE="Inbound Message Rate";
	private static final String MSR_DEST_INBOUND_BYTES_COUNT="Inbound Bytes Count";
	private static final String MSR_DEST_INBOUND_BYTES_RATE="Inbound Bytes Rate";
	
	private static final String MSR_DEST_OUTBOUND_MSG_COUNT="Outbound Message Count";
	private static final String MSR_DEST_OUTBOUND_MSG_RATE="Outbound Message Rate";
	private static final String MSR_DEST_OUTBOUND_BYTES_COUNT="Outbound Bytes Count";
	private static final String MSR_DEST_OUTBOUND_BYTES_RATE="Outbound Bytes Rate";
	
	private static final String MSR_DEST_Q_RECEIVER_COUNT="Queue Receiver Count";
	private static final String MSR_DEST_Q_DELIVERED_MSG_COUNT="Queue Delivered Message Count";
	private static final String MSR_DEST_Q_INTRANSIT_MSG_COUNT="Queue InTransit Message Count";
	
	private static final String MSR_DEST_T_SUBSCRIBER_COUNT="Topic Subscriber Count";
	private static final String MSR_DEST_T_DURABLE_COUNT="Topic Durable Count";

	/**
	 * Initializes the Plugin. This method is called in the following cases:
	 * <ul>
	 * <li>before <tt>execute</tt> is called the first time for this
	 * scheduled Plugin</li>
	 * <li>before the next <tt>execute</tt> if <tt>teardown</tt> was called
	 * after the last execution</li>
	 * </ul>
	 * <p>
	 * If the returned status is <tt>null</tt> or the status code is a
	 * non-success code then {@link Plugin#teardown() teardown()} will be called
	 * next.
	 * <p>
	 * Resources like sockets or files can be opened in this method.
	 * @param env
	 *            the configured <tt>MonitorEnvironment</tt> for this Plugin;
	 *            contains subscribed measures, but <b>measurements will be
	 *            discarded</b>
	 * @see Plugin#teardown()
	 * @return a <tt>Status</tt> object that describes the result of the
	 *         method call
	 */
	@Override
	public Status setup(MonitorEnvironment env) throws Exception {
		// TODO
		return new Status(Status.StatusCode.Success);
	}

	/**
	 * Executes the Monitor Plugin to retrieve subscribed measures and store
	 * measurements.
	 *
	 * <p>
	 * This method is called at the scheduled intervals. If the Plugin execution
	 * takes longer than the schedule interval, subsequent calls to
	 * {@link #execute(MonitorEnvironment)} will be skipped until this method
	 * returns. After the execution duration exceeds the schedule timeout,
	 * {@link TaskEnvironment#isStopped()} will return <tt>true</tt>. In this
	 * case execution should be stopped as soon as possible. If the Plugin
	 * ignores {@link TaskEnvironment#isStopped()} or fails to stop execution in
	 * a reasonable timeframe, the execution thread will be stopped ungracefully
	 * which might lead to resource leaks!
	 *
	 * @param env
	 *            a <tt>MonitorEnvironment</tt> object that contains the
	 *            Plugin configuration and subscribed measures. These
	*            <tt>MonitorMeasure</tt>s can be used to store measurements.
	 * @return a <tt>Status</tt> object that describes the result of the
	 *         method call
	 * @throws Exception 
	 */
	//@SuppressWarnings("deprecation")
	@Override
	public Status execute(MonitorEnvironment env) {
		/* 
		// this sample which shows how to book to (dynamic) monitor measures

		Collection<MonitorMeasure> monitorMeasures = env.getMonitorMeasures("mymetricgroup", "mymetric");
		for (MonitorMeasure subscribedMonitorMeasure : monitorMeasures) {

			//this will book to the monitor measure
			subscribedMonitorMeasure.setValue(42);

			//for this subscribed measure we want to create a dynamic measure
			MonitorMeasure dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, "Queue Name", "Queue 1");
			dynamicMeasure.setValue(24);

			//now we create another one for a different queue name
			dynamicMeasure = env.createDynamicMeasure(subscribedMonitorMeasure, "Queue Name", "Queue 2");
			dynamicMeasure.setValue(32);
		}
		*/
		
		TibjmsAdmin admin = null;
		
		try {
			log.fine("Starting execute...");

			String serverUrl = env.getHost().getAddress();

			log.fine("Server : " + serverUrl);

			String port = env.getConfigString("Port");

			log.fine("Port : " + port);

			String userName = env.getConfigString("Username");

			log.fine("User : " + userName);

			String password = env.getConfigPassword("Password");

			serverUrl = "tcp://" + serverUrl + ":" + port;
        
			log.fine("connecting as " + userName + " to " + serverUrl);
        
			admin = new TibjmsAdmin(serverUrl,userName,password);
		
			ServerInfo serverInfo = admin.getInfo();
        
			Collection<MonitorMeasure> measures;

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_DISK_READ_RATE)) != null) {
				//log.fine("measure: " + MSR_DISK_READ_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					measure.setValue(serverInfo.getDiskReadRate());
					log.fine("measure: " + MSR_DISK_READ_RATE + "  val: " + serverInfo.getDiskReadRate());
					//measure.setValue(100);
				}
			}
		
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_DISK_WRITE_RATE)) != null) {
				//log.fine("measure: " + MSR_DISK_WRITE_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_DISK_WRITE_RATE + "  val: " + serverInfo.getDiskWriteRate());
					measure.setValue(serverInfo.getDiskWriteRate());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_SYNC_STORE_SIZE)) != null) {
				//log.fine("measure: " + MSR_DISK_WRITE_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_SYNC_STORE_SIZE + "  val: " + serverInfo.getSyncDBSize());
					measure.setValue(serverInfo.getSyncDBSize());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_ASYNC_STORE_SIZE)) != null) {
				//log.fine("measure: " + MSR_DISK_WRITE_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_ASYNC_STORE_SIZE + "  val: " + serverInfo.getAsyncDBSize());
					measure.setValue(serverInfo.getAsyncDBSize());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_MSG_MEM_USED)) != null) {
				//log.fine("measure: " + MSR_DISK_WRITE_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_MSG_MEM_USED + "  val: " + serverInfo.getMsgMem());
					measure.setValue(serverInfo.getMsgMem());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_MSG_MEM_POOL_USED)) != null) {
				//log.fine("measure: " + MSR_DISK_WRITE_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_MSG_MEM_POOL_USED + "  val: " + serverInfo.getMsgMemPooled());
					measure.setValue(serverInfo.getMsgMemPooled());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_MSG_MAX_MEM)) != null) {
				//log.fine("measure: " + MSR_DISK_WRITE_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_MSG_MAX_MEM + "  val: " + serverInfo.getMaxMsgMemory());
					measure.setValue(serverInfo.getMaxMsgMemory());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_MSG_FREE_MEM)) != null) {
				//log.fine("measure: " + MSR_DISK_WRITE_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_MSG_FREE_MEM + "  val: " + (serverInfo.getMaxMsgMemory() - serverInfo.getMsgMem()));
					measure.setValue(serverInfo.getMaxMsgMemory() - serverInfo.getMsgMem());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_CONN_COUNT)) != null) {
				//log.fine("measure: " + MSR_CONN_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_CONN_COUNT + "  val: " + serverInfo.getConnectionCount());
					measure.setValue(serverInfo.getConnectionCount());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_MAX_CONNS)) != null) {
				//log.fine("measure: " + MSR_MAX_CONNS + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_MAX_CONNS + "  val: " + serverInfo.getMaxConnections());
					measure.setValue(serverInfo.getMaxConnections());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_CONN_PERCENTAGE)) != null) {
				//log.fine("measure: " + MSR_CONN_COUNT + "  len: " + measures.size());
				
				if (serverInfo.getMaxConnections() > 0) {
					int percentage = (int) (serverInfo.getConnectionCount() * 100 / serverInfo.getMaxConnections());

					for (MonitorMeasure measure : measures) {		
						log.fine("measure: " + MSR_CONN_PERCENTAGE + "  val: " + percentage);
						measure.setValue(percentage);
					}
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_SESSION_COUNT)) != null) {
				//log.fine("measure: " + MSR_CONN_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_SESSION_COUNT + "  val: " + serverInfo.getSessionCount());
					measure.setValue(serverInfo.getSessionCount());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_PRODUCER_COUNT)) != null) {
				//log.fine("measure: " + MSR_PRODUCER_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_PRODUCER_COUNT + "  val: " + serverInfo.getProducerCount());
					measure.setValue(serverInfo.getProducerCount());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_CONSUMER_COUNT)) != null) {
				//log.fine("measure: " + MSR_CONSUMER_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_CONSUMER_COUNT + "  val: " + serverInfo.getConsumerCount());
					measure.setValue(serverInfo.getConsumerCount());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_DURABLE_COUNT)) != null) {
				//log.fine("measure: " + MSR_CONSUMER_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_DURABLE_COUNT + "  val: " + serverInfo.getDurableCount());
					measure.setValue(serverInfo.getDurableCount());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_TOPIC_COUNT)) != null) {
				//log.fine("measure: " + MSR_CONSUMER_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_TOPIC_COUNT + "  val: " + serverInfo.getTopicCount());
					measure.setValue(serverInfo.getTopicCount());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_QUEUE_COUNT)) != null) {
				//log.fine("measure: " + MSR_CONSUMER_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_QUEUE_COUNT + "  val: " + serverInfo.getQueueCount());
					measure.setValue(serverInfo.getQueueCount());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_PENDING_MSG_COUNT)) != null) {
				//log.fine("measure: " + MSR_PENDING_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_PENDING_MSG_COUNT + "  val: " + serverInfo.getPendingMessageCount());
					measure.setValue(serverInfo.getPendingMessageCount());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_PENDING_MSG_SIZE)) != null) {
				//log.fine("measure: " + MSR_PENDING_MSG_SIZE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_PENDING_MSG_SIZE + "  val: " + serverInfo.getPendingMessageSize());
					measure.setValue(serverInfo.getPendingMessageSize());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_INBOUND_MSG_COUNT)) != null) {
				//log.fine("measure: " + MSR_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_INBOUND_MSG_COUNT + "  val: " + serverInfo.getInboundMessageCount());
					measure.setValue(serverInfo.getInboundMessageCount());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_INBOUND_MSG_RATE)) != null) {
				//log.fine("measure: " + MSR_INBOUND_MSG_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_INBOUND_MSG_RATE + "  val: " + serverInfo.getInboundMessageRate());
					measure.setValue(serverInfo.getInboundMessageRate());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_INBOUND_BYTES_RATE)) != null) {
				//log.fine("measure: " + MSR_INBOUND_BYTES_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_INBOUND_BYTES_RATE + "  val: " + serverInfo.getInboundBytesRate());
					measure.setValue(serverInfo.getInboundBytesRate());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_OUTBOUND_MSG_COUNT)) != null) {
				//log.fine("measure: " + MSR_OUTBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_OUTBOUND_MSG_COUNT + "  val: " + serverInfo.getOutboundMessageCount());
					measure.setValue(serverInfo.getOutboundMessageCount());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_OUTBOUND_MSG_RATE)) != null) {
				//log.fine("measure: " + MSR_OUTBOUND_MSG_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_OUTBOUND_MSG_RATE + "  val: " + serverInfo.getOutboundMessageRate());
					measure.setValue(serverInfo.getOutboundMessageRate());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_OUTBOUND_BYTES_RATE)) != null) {
				//log.fine("measure: " + MSR_OUTBOUND_BYTES_RATE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_OUTBOUND_BYTES_RATE + "  val: " + serverInfo.getOutboundBytesRate());
					measure.setValue(serverInfo.getOutboundBytesRate());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_LOGFILE_MAX_SIZE)) != null) {
				//log.fine("measure: " + MSR_PENDING_MSG_SIZE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_LOGFILE_MAX_SIZE + "  val: " + serverInfo.getLogFileMaxSize());
					measure.setValue(serverInfo.getLogFileMaxSize());
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_LOGFILE_SIZE)) != null) {
				//log.fine("measure: " + MSR_PENDING_MSG_SIZE + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					log.fine("measure: " + MSR_LOGFILE_SIZE + "  val: " + serverInfo.getLogFileSize());
					measure.setValue(serverInfo.getLogFileSize());
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_BROKER_STAT, MSR_LOGFILE_PERCENT_USED)) != null) {
				//log.fine("measure: " + MSR_PENDING_MSG_SIZE + "  len: " + measures.size());

				if (serverInfo.getLogFileMaxSize() > 0) {
					int percentage = (int) (serverInfo.getLogFileSize() * 100 / serverInfo.getLogFileMaxSize());
					
					for (MonitorMeasure measure : measures) {
						log.fine("measure: " + MSR_LOGFILE_PERCENT_USED + "  val: " + percentage);
						measure.setValue(percentage);
					}
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_CONSUMER_COUNT)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");
					
					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getConsumerCount());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_CONSUMER_COUNT + "  val: " + queueInfo.getConsumerCount());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getConsumerCount());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_CONSUMER_COUNT + "  val: " + topicInfo.getConsumerCount());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_FLOWCONTROL_MAXBYTES)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getFlowControlMaxBytes());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_FLOWCONTROL_MAXBYTES + "  val: " + queueInfo.getFlowControlMaxBytes());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getFlowControlMaxBytes());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_FLOWCONTROL_MAXBYTES + "  val: " + topicInfo.getFlowControlMaxBytes());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}
			
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_PENDING_MSG_COUNT)) != null) {
				log.fine("measure: " + MSR_DEST_PENDING_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					log.fine("measure: " + MSR_DEST_PENDING_MSG_COUNT + "  dest get param: " + dest);
					
					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);
					
					log.fine("measure: " + MSR_DEST_PENDING_MSG_COUNT + "  dest: " + dest + " queueInfos: " + queueInfos.length);
					
					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getPendingMessageCount());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_PENDING_MSG_COUNT + "  val: " + queueInfo.getPendingMessageCount());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						log.fine("measure: " + MSR_DEST_PENDING_MSG_COUNT + "  dest: " + dest + " topicInfos: " + topicInfos.length);
						
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getPendingMessageCount());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_PENDING_MSG_COUNT + "  val: " + topicInfo.getPendingMessageCount());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_PENDING_MSG_SIZE)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getPendingMessageSize());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_PENDING_MSG_SIZE + "  val: " + queueInfo.getPendingMessageSize());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getPendingMessageSize());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_PENDING_MSG_SIZE + "  val: " + topicInfo.getPendingMessageSize());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_INBOUND_MSG_COUNT)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getInboundStatistics().getTotalMessages());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  val: " + queueInfo.getInboundStatistics().getTotalMessages());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getInboundStatistics().getTotalMessages());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  val: " + topicInfo.getInboundStatistics().getTotalMessages());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_INBOUND_MSG_RATE)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getInboundStatistics().getMessageRate());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_INBOUND_MSG_RATE + "  val: " + queueInfo.getInboundStatistics().getMessageRate());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getInboundStatistics().getMessageRate());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_INBOUND_MSG_RATE + "  val: " + topicInfo.getInboundStatistics().getMessageRate());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_INBOUND_BYTES_COUNT)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getInboundStatistics().getTotalBytes());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_INBOUND_BYTES_COUNT + "  val: " + queueInfo.getInboundStatistics().getTotalBytes());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getInboundStatistics().getTotalBytes());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_INBOUND_BYTES_COUNT + "  val: " + topicInfo.getInboundStatistics().getTotalBytes());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_INBOUND_BYTES_RATE)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getInboundStatistics().getByteRate());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_INBOUND_BYTES_RATE + "  val: " + queueInfo.getInboundStatistics().getByteRate());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getInboundStatistics().getByteRate());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_INBOUND_BYTES_RATE + "  val: " + topicInfo.getInboundStatistics().getByteRate());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_OUTBOUND_MSG_COUNT)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getOutboundStatistics().getTotalMessages());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_OUTBOUND_MSG_COUNT + "  val: " + queueInfo.getOutboundStatistics().getTotalMessages());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getOutboundStatistics().getTotalMessages());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_OUTBOUND_MSG_COUNT + "  val: " + topicInfo.getOutboundStatistics().getTotalMessages());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_OUTBOUND_MSG_RATE)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getOutboundStatistics().getMessageRate());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_OUTBOUND_MSG_RATE + "  val: " + queueInfo.getOutboundStatistics().getMessageRate());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getOutboundStatistics().getMessageRate());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_OUTBOUND_MSG_RATE + "  val: " + topicInfo.getOutboundStatistics().getMessageRate());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_OUTBOUND_BYTES_COUNT)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getOutboundStatistics().getTotalBytes());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_OUTBOUND_BYTES_COUNT + "  val: " + queueInfo.getOutboundStatistics().getTotalBytes());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getOutboundStatistics().getTotalBytes());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_OUTBOUND_BYTES_COUNT + "  val: " + topicInfo.getOutboundStatistics().getTotalBytes());
							}
						}
						else {
							measure.setValue(0);
						}
					}
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_OUTBOUND_BYTES_RATE)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getOutboundStatistics().getByteRate());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_OUTBOUND_BYTES_RATE + "  val: " + queueInfo.getOutboundStatistics().getByteRate());
						}						
					}
					else {
						TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);
					 
						if (topicInfos.length > 0) {
							for (TopicInfo topicInfo : topicInfos) {
								MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
								dynamicMeasure.setValue(topicInfo.getOutboundStatistics().getByteRate());
								log.fine("topic: " + topicInfo.getName() + " measure: " + MSR_DEST_OUTBOUND_BYTES_RATE + "  val: " + topicInfo.getOutboundStatistics().getByteRate());
							}
						}
						else {
							measure.setValue(0);
						}
					}

				}
			}
			
			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_Q_RECEIVER_COUNT)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {						
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getReceiverCount());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_Q_RECEIVER_COUNT + "  val: " + queueInfo.getReceiverCount());
						}
					}
					else {
						measure.setValue(0);
					}
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_Q_DELIVERED_MSG_COUNT)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {						
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getDeliveredMessageCount());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_Q_DELIVERED_MSG_COUNT + "  val: " + queueInfo.getDeliveredMessageCount());
						}
					}
					else {
						measure.setValue(0);
					}
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_Q_INTRANSIT_MSG_COUNT)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					QueueInfo[] queueInfos = admin.getQueuesStatistics(dest);

					if (queueInfos.length > 0) {						
						for (QueueInfo queueInfo : queueInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", queueInfo.getName());
							dynamicMeasure.setValue(queueInfo.getInTransitMessageCount());
							log.fine("queue: " + queueInfo.getName() + " measure: " + MSR_DEST_Q_INTRANSIT_MSG_COUNT + "  val: " + queueInfo.getInTransitMessageCount());
						}
					}
					else {
						measure.setValue(0);
					}
				}
			}

			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_T_SUBSCRIBER_COUNT)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);

					if (topicInfos.length > 0) {						
						for (TopicInfo topicInfo : topicInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
							dynamicMeasure.setValue(topicInfo.getSubscriberCount());
							log.fine("queue: " + topicInfo.getName() + " measure: " + MSR_DEST_T_SUBSCRIBER_COUNT + "  val: " + topicInfo.getSubscriberCount());
						}
					}
					else {
						measure.setValue(0);
					}
				}
			}


			if ((measures = env.getMonitorMeasures(METRIC_GROUP_DEST_STAT, MSR_DEST_T_DURABLE_COUNT)) != null) {
				//log.fine("measure: " + MSR_DEST_INBOUND_MSG_COUNT + "  len: " + measures.size());
			
				for (MonitorMeasure measure : measures) {
					String dest = measure.getParameter("Destination");

					if (dest.equals("")) {
						break;
					}

					TopicInfo[] topicInfos = admin.getTopicsStatistics(dest);

					if (topicInfos.length > 0) {						
						for (TopicInfo topicInfo : topicInfos) {
							MonitorMeasure dynamicMeasure = env.createDynamicMeasure(measure, "Dest Name", topicInfo.getName());
							dynamicMeasure.setValue(topicInfo.getDurableSubscriptionCount());
							log.fine("queue: " + topicInfo.getName() + " measure: " + MSR_DEST_T_DURABLE_COUNT + "  val: " + topicInfo.getDurableSubscriptionCount());
						}
					}
					else {
						measure.setValue(0);
					}
				}
			}

			admin.close();
			log.fine("closing connection ");
			
			return new Status(Status.StatusCode.Success);
		}
		
		catch (TibjmsAdminException exp) {
			String msg = "TibjmsAdminException: " + exp.getMessage();
			log.fine(msg);
			try {
				admin.close();
			} catch (TibjmsAdminException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			Status status = new Status();
			status.setException(exp);
			status.setExceptionClassName("TibjmsAdminException");
			status.setExceptionMessage(exp.getMessage());
			status.setMessage(msg);
			status.setShortMessage(msg);
			status.setStatusCode(Status.StatusCode.ErrorTargetService);
			return status;
			

			//log.log(Level.FINE, exp.getMessage(), exp);
			//return new Status(Status.StatusCode.ErrorInternal);
			//return new Status(Status.StatusCode.ErrorTargetService, msg, msg, exp);
			//throw new Exception(exp);
		}
		
		catch (Exception exp) {
			String msg = "Exception: " + exp.getMessage();
			log.fine(msg);
			try {
				admin.close();
			} catch (TibjmsAdminException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			Status status = new Status();
			status.setException(exp);
			status.setExceptionClassName("Exception");
			status.setExceptionMessage(exp.getMessage());
			status.setMessage(msg);
			status.setShortMessage(msg);
			status.setStatusCode(Status.StatusCode.ErrorTargetService);
			return status;
			
			
			//return new Status(Status.StatusCode.ErrorTargetService, msg, msg, exp);
			//log.log(Level.SEVERE, exp.getMessage(), exp);
			//return new Status(Status.StatusCode.ErrorInternal);
			//throw new Exception(exp);
		}
	}

	/**
	 * Shuts the Plugin down and frees resources. This method is called in the
	 * following cases:
	 * <ul>
	 * <li>the <tt>setup</tt> method failed</li>
	 * <li>the Plugin configuration has changed</li>
	 * <li>the execution duration of the Plugin exceeded the schedule timeout</li>
	 * <li>the schedule associated with this Plugin was removed</li>
	 * </ul>
	 *
	 * <p>
	 * The Plugin methods <tt>setup</tt>, <tt>execute</tt> and
	 * <tt>teardown</tt> are called on different threads, but they are called
	 * sequentially. This means that the execution of these methods does not
	 * overlap, they are executed one after the other.
	 *
	 * <p>
	 * Examples:
	 * <ul>
	 * <li><tt>setup</tt> (failed) -&gt; <tt>teardown</tt></li>
	 * <li><tt>execute</tt> starts, configuration changes, <tt>execute</tt>
	 * ends -&gt; <tt>teardown</tt><br>
	 * on next schedule interval: <tt>setup</tt> -&gt; <tt>execute</tt> ...</li>
	 * <li><tt>execute</tt> starts, execution duration timeout,
	 * <tt>execute</tt> stops -&gt; <tt>teardown</tt></li>
	 * <li><tt>execute</tt> starts, <tt>execute</tt> ends, schedule is
	 * removed -&gt; <tt>teardown</tt></li>
	 * </ul>
	 * Failed means that either an unhandled exception is thrown or the status
	 * returned by the method contains a non-success code.
	 *
	 *
	 * <p>
	 * All by the Plugin allocated resources should be freed in this method.
	 * Examples are opened sockets or files.
	 *
	 * @see Monitor#setup(MonitorEnvironment)
	 */	@Override
	public void teardown(MonitorEnvironment env) throws Exception {
		 // TODO
	}
	 
	 public static void main(String[] args) throws TibjmsAdminException {
		 System.out.println("erpo");
		 
		 TibjmsAdmin erp = new TibjmsAdmin("tcp://localhost:7222", "admin","");

		 System.out.println("logfile max size:" + erp.getInfo().getLogFileMaxSize());
		 System.out.println("logfile size:" + erp.getInfo().getLogFileSize());
		 
		 
		 
		 TopicInfo[] topicInfos = erp.getTopicsStatistics();
		 
		 System.out.println("size:" + topicInfos.length);
		 
		 for (TopicInfo topicInfo : topicInfos) {
			 System.out.println("topic: " + topicInfo.toString());
			 
		 }
		

		 QueueInfo[] queueInfos = erp.getQueuesStatistics();
		 
		 System.out.println("size:" + queueInfos.length);
		 
		 for (QueueInfo queueInfo : queueInfos) {
			 System.out.println("queue: " + queueInfo.toString());
			 
		 }

		 
		 queueInfos = erp.getQueuesStatistics("");
		 
		 System.out.println("size2:" + queueInfos.length);

		 System.out.println("queue count: " + queueInfos[0].getInboundStatistics().getTotalMessages());

		 System.out.println("erp1");
		 //erp.getChannelStatistics(arg0)
	 }
}
